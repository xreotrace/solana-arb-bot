"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParsableMintInfo = exports.ParsableTokenAccountInfo = void 0;
exports.staticImplements = staticImplements;
const spl_token_1 = require("@solana/spl-token");
let ParsableTokenAccountInfo = class ParsableTokenAccountInfo {
    constructor() { }
    static parse(address, data) {
        if (!data) {
            return null;
        }
        try {
            return {
                ...(0, spl_token_1.unpackAccount)(address, data, data.owner),
                tokenProgram: data.owner,
            };
        }
        catch (e) {
            console.error(`error while parsing TokenAccount ${address.toBase58()}: ${e}`);
            return null;
        }
    }
};
exports.ParsableTokenAccountInfo = ParsableTokenAccountInfo;
exports.ParsableTokenAccountInfo = ParsableTokenAccountInfo = __decorate([
    staticImplements()
], ParsableTokenAccountInfo);
let ParsableMintInfo = class ParsableMintInfo {
    constructor() { }
    static parse(address, data) {
        if (!data) {
            return null;
        }
        try {
            return {
                ...(0, spl_token_1.unpackMint)(address, data, data.owner),
                tokenProgram: data.owner,
            };
        }
        catch (e) {
            console.error(`error while parsing Mint ${address.toBase58()}: ${e}`);
            return null;
        }
    }
};
exports.ParsableMintInfo = ParsableMintInfo;
exports.ParsableMintInfo = ParsableMintInfo = __decorate([
    staticImplements()
], ParsableMintInfo);
function staticImplements() {
    return (constructor) => {
        constructor;
    };
}
//# sourceMappingURL=parsing.js.map