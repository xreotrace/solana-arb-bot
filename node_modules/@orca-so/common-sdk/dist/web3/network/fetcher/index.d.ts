import type { AccountWithTokenProgram, MintWithTokenProgram, ParsableEntity } from "..";
import type { Address } from "../../address-util";
export * from "./simple-fetcher-impl";
export type BasicSupportedTypes = AccountWithTokenProgram | MintWithTokenProgram;
export interface AccountFetcher<T, AccountFetchOptions> {
    getAccount: <U extends T>(address: Address, parser: ParsableEntity<U>, opts?: AccountFetchOptions) => Promise<U | null>;
    getAccounts: <U extends T>(address: Address[], parser: ParsableEntity<U>, opts?: AccountFetchOptions) => Promise<ReadonlyMap<string, U | null>>;
    getAccountsAsArray: <U extends T>(address: Address[], parser: ParsableEntity<U>, opts?: AccountFetchOptions) => Promise<ReadonlyArray<U | null>>;
    populateAccounts: <U extends T>(accounts: ReadonlyMap<string, U | null>, parser: ParsableEntity<U>, now: number) => void;
}
